/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BLL.OrderDetailBLL;
import BLL.VegetableBLL;
import DTO.OrderDetail;
import DTO.Vegetable;
import java.awt.CardLayout;
import java.text.NumberFormat;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.plot.PiePlot;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author CULI
 */
public class ThongKeSanPham extends javax.swing.JFrame {
    private OrderDetailBLL odbll;
//    private VegetableBLL vg;
    private int soLuongSanPhamBan=0;
    private int soLuongSanPham=0;
    private String hangBanChayNhat;
    public int getSoLuongSanPhamBan() {
        return soLuongSanPhamBan;
    }

    public int getSoLuongSanPham() {
        return soLuongSanPham;
    }
    public String summary() {
        String tongKet="";
        tongKet = "Số Lượng Sản Phẩm Bán: " + this.getSoLuongSanPhamBan()+"/"+this.getSoLuongSanPham()+".   Hãng bán chạy nhất: "+this.hangBanChayNhat;
        return tongKet;
    }
    /**
     * Creates new form ThongKeSanPham
     */
    public ThongKeSanPham() {
        odbll = new OrderDetailBLL();
//        vg = new VegetableBLL();
//        List<Vegetable> list = vg.loadVeg();
        initComponents();
        this.setDataToChart();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 825, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 586, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ThongKeSanPham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ThongKeSanPham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ThongKeSanPham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ThongKeSanPham.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ThongKeSanPham().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables

    private void setDataToChart() {
        DefaultPieDataset pieData = this.createPieDataset();
        JFreeChart pieChart = ChartFactory.createPieChart3D("Thống kê sản phẩm bán được".toUpperCase(), pieData);
        PiePlot plot = (PiePlot) pieChart.getPlot();
        plot.setSimpleLabels(true);
        
        PieSectionLabelGenerator gen = new StandardPieSectionLabelGenerator("({2})", NumberFormat.getInstance(), NumberFormat.getPercentInstance());
        plot.setLabelGenerator(gen);
        
        ChartPanel piePanel = new ChartPanel(pieChart);
        //chartPanel.setPreferredSize(new Dimension(800, 600));
        panel.setLayout(new CardLayout());
        panel.add(piePanel);
        panel.validate();
        panel.repaint();
    }
    String convertToString(String str){
        switch(str){
            case "1":return "Tomato";
            case "2":return "Potato";
            case "3":return "Apple";
            case "4":return "Water melon";
            case "5":return "Broccoli";
            case "6":return "Celery";
            case "7":return "Spring onion";
            case "8":return "Garlic";
            
        }
        return "Unknown";
    }

    private DefaultPieDataset createPieDataset() {
        List<OrderDetail> list_od=this.odbll.loadOrderDetail();
//        List<Vegetable> list_veg=this.vg.loadVeg();
        DefaultPieDataset dataset = new DefaultPieDataset();
        int max=-1;
        Map<String, List<OrderDetail>> bymaod =  list_od.stream().collect(Collectors.groupingBy(od -> String.valueOf(od.getVegetableID())));
//        Map<String, List<Vegetable>> bymaSP = list_veg.stream().collect(Collectors.groupingBy(veg -> veg.getVegetableName()));
        for(Map.Entry<String, List<OrderDetail>> entry : bymaod.entrySet()){
            String key = entry.getKey();
            List<OrderDetail> val = entry.getValue();
//            List<Vegetable> listveg = bymaSP.get(key);
            int soLuongBan = 0;
            int soLuong = 0;
            for (OrderDetail od : val) {
                soLuongBan += od.getQuantity();
            }
//            for (Vegetable veg : listveg) {
//                System.out.println(veg.getVegetableName());
//            }
            this.soLuongSanPham += soLuong;
            this.soLuongSanPhamBan += soLuongBan;
            dataset.setValue(convertToString (key), soLuongBan);
        }
        
        return dataset;
    }
}
